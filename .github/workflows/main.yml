# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
      VCPKG_ROOT: './vcpkg'
      
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['windows-2019', 'ubuntu-20.04']
        include:
          - os: 'windows-2019'
            triplet: 'x64-windows'
            mono: ''
            bootstrap: 'bootstrap-vcpkg.bat'
            preset: 'windows-default'
          - os: 'ubuntu-20.04'
            triplet: 'x64-linux'
            # To run `nuget.exe` on non-Windows platforms, we must use `mono`.
            mono: 'mono'
            bootstrap: 'bootstrap-vcpkg.sh'
            preset: 'linux-default'
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - uses: actions/checkout@v2
        with:
          repository: 'tartanllama/vcpkg'
          path: 'vcpkg'
    
      # This step assumes `vcpkg` has been bootstrapped (run `./vcpkg/bootstrap-vcpkg`)
      - name: 'Setup NuGet Credentials'
        shell: 'bash'
        # Replace <OWNER> with your organization name
        run: >
          ./vcpkg/${{ matrix.bootstrap }} &&
          ${{ matrix.mono }} `./vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "https://nuget.pkg.github.com/tartanllama/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "tartanllama"
          -password "${{ secrets.GITHUB_TOKEN }}"
          
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --preset=${{matrix.preset}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
